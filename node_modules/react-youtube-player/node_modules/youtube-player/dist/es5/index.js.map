{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;;;;;;;sBAAmB,QAAQ;;;;wBACN,UAAU;;;;6BACL,iBAAiB;;;;0BACpB,cAAc;;;;oCACJ,wBAAwB;;;;;;AAGzD,IAAI,aAAa,YAAA;IACb,gBAAgB,YAAA,CAAC;;AAErB,aAAa,GAAG,EAAE,CAAC;AACnB,gBAAgB,GAAG,wCAAsB,CAAC;;;;;;;;;;;AAW1C,aAAa,CAAC,WAAW,GAAG,UAAC,OAAO,EAAK;AACrC,QAAI,MAAM,YAAA,CAAC;;AAEX,UAAM,GAAG,EAAE,CAAC;;AAEZ,uEAAsB,UAAC,SAAS,EAAK;AACjC,YAAI,WAAW,YAAA,CAAC;;AAEhB,mBAAW,UAAQ,yCAAa,SAAS,CAAC,AAAE,CAAC;;AAE7C,cAAM,CAAC,WAAW,CAAC,GAAG,UAAC,KAAK,EAAK;AAC7B,mBAAO,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;SACrC,CAAC;KACL,CAAC,CAAC;;AAEH,WAAO,MAAM,CAAC;CACjB,CAAC;;;;;;;;;AASF,aAAa,CAAC,eAAe,GAAG,UAAC,cAAc,EAAK;AAChD,QAAI,SAAS,YAAA,CAAC;;AAEd,aAAS,GAAG,EAAE,CAAC;;AAEf,0EAAyB,UAAC,YAAY,EAAK;AACvC,iBAAS,CAAC,YAAY,CAAC,GAAG,YAAa;8CAAT,IAAI;AAAJ,oBAAI;;;AAC9B,mBAAO,cAAc,CAChB,IAAI,CAAC,UAAC,MAAM,EAAK;AACd,uBAAO,MAAM,CAAC,YAAY,OAAC,CAApB,MAAM,EAAkB,IAAI,CAAC,CAAC;aACxC,CAAC,CAAC;SACV,CAAC;KACL,CAAC,CAAC;;AAEH,WAAO,SAAS,CAAC;CACpB,CAAC;;;;;;;;;;;;;;;;;;;;qBAmBa,UAAC,SAAS,EAAmB;QAAjB,OAAO,yDAAG,EAAE;;AACnC,QAAI,OAAO,YAAA;QACP,SAAS,YAAA;QACT,cAAc,YAAA,CAAC;;AAEnB,aAAS,GAAG,EAAE,CAAC;AACf,WAAO,GAAG,0BAAQ,CAAC;;AAEnB,QAAI,OAAO,CAAC,MAAM,EAAE;AAChB,cAAM,IAAI,KAAK,yCAAyC,CAAC;KAC5D;;AAED,QAAI,OAAO,SAAS,aAAa,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;AACtE,cAAM,IAAI,KAAK,gBAAc,SAAS,uBAAoB,CAAC;KAC9D;;AAED,WAAO,CAAC,MAAM,GAAG,aAAa,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;;AAEpD,kBAAc,GAAG,0BAAa,UAAC,OAAO,EAAK;AACvC,wBAAgB,CACX,IAAI,CAAC,UAAC,EAAE,EAAK;AACV,mBAAO,IAAI,EAAE,CAAC,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;SAC5C,CAAC,CACD,IAAI,CAAC,UAAC,MAAM,EAAK;AACd,mBAAO,CAAC,EAAE,UAAU,YAAM;AACtB,uBAAO,CAAC,MAAM,CAAC,CAAC;;;;;;;;;aAUnB,CAAC,CAAC;SACN,CAAC,CAAC;KACV,CAAC,CAAC;;AAEH,aAAS,GAAG,aAAa,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;AAC1D,aAAS,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;;AAE1B,WAAO,SAAS,CAAC;CACpB","file":"index.js","sourcesContent":["import Sister from 'sister';\nimport Bluebird from 'bluebird';\nimport functionNames from './functionNames';\nimport eventNames from './eventNames';\nimport loadYouTubeIframeAPI from './loadYouTubeIframeAPI';\nimport _ from 'lodash';\n\nlet YouTubePlayer,\n    youtubeIframeAPI;\n\nYouTubePlayer = {};\nyoutubeIframeAPI = loadYouTubeIframeAPI();\n\n/**\n * Construct an object that defines an event handler for all of the\n * YouTube player events. Proxy captured events through an event emitter.\n *\n * @todo Capture event parameters.\n * @see https://developers.google.com/youtube/iframe_api_reference#Events\n * @param {Sister} emitter\n * @return {Object}\n */\nYouTubePlayer.proxyEvents = (emitter) => {\n    let events;\n\n    events = {};\n\n    _.forEach(eventNames, (eventName) => {\n        let onEventName;\n\n        onEventName = `on${_.capitalize(eventName)}`;\n\n        events[onEventName] = (event) => {\n            emitter.trigger(eventName, event);\n        };\n    });\n\n    return events;\n};\n\n/**\n * Delays player API method execution until player state is ready.\n *\n * @todo Proxy all of the methods using Object.keys.\n * @param {Promise} playerAPIReady Promise that resolves when player is ready.\n * @return {Object}\n */\nYouTubePlayer.promisifyPlayer = (playerAPIReady) => {\n    let functions;\n\n    functions = {};\n\n    _.forEach(functionNames, (functionName) => {\n        functions[functionName] = (...args) => {\n            return playerAPIReady\n                .then((player) => {\n                    return player[functionName](...args);\n                });\n        };\n    });\n\n    return functions;\n};\n\n/**\n * @typedef options\n * @see https://developers.google.com/youtube/iframe_api_reference#Loading_a_Video_Player\n * @param {Number} width\n * @param {Number} height\n * @param {String} videoId\n * @param {Object} playerVars\n * @param {Object} events\n */\n\n/**\n * A factory function used to produce an instance of YT.Player and queue function calls and proxy events of the resulting object.\n *\n * @param {HTMLElement|String} elementId Either the DOM element or the id of the HTML element where the API will insert an <iframe>.\n * @param {YouTubePlayer~options} options\n * @return {Object}\n */\nexport default (elementId, options = {}) => {\n    let emitter,\n        playerAPI,\n        playerAPIReady;\n\n    playerAPI = {};\n    emitter = Sister();\n\n    if (options.events) {\n        throw new Error(`Event handlers cannot be overwritten.`);\n    }\n\n    if (typeof elementId === `string` && !document.getElementById(elementId)) {\n        throw new Error(`Element \"#${elementId}\" does not exist.`);\n    }\n\n    options.events = YouTubePlayer.proxyEvents(emitter);\n\n    playerAPIReady = new Bluebird((resolve) => {\n        youtubeIframeAPI\n            .then((YT) => {\n                return new YT.Player(elementId, options);\n            })\n            .then((player) => {\n                emitter.on(`ready`, () => {\n                    resolve(player);\n\n                    // Until Proxies become available, this is the only way to Promisify the SDK.\n                    /*\n                    methods = _.map(_.functions(player), function (name) {\n                        return '\\'' + name + '\\'';\n                    });\n\n                    console.log(methods.join(', '));\n                    */\n                });\n            });\n    });\n\n    playerAPI = YouTubePlayer.promisifyPlayer(playerAPIReady);\n    playerAPI.on = emitter.on;\n\n    return playerAPI;\n};\n"],"sourceRoot":"/source/"}